// Table of Contents
// 1. Grid Variables
// 2. Grid Mixins
// 3. CSS Ready Mixins and Classes

 // ----- Grid Variables
// ---------------------
$gutter: 15px;
$columns: 12;
$block-grids: 8;
$width: 100%;
$max-width: 1200px;

* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

 // ----- Grid Mixins
// ------------------

// ----- Rows
@mixin row($use:normal) {
	@if $use == normal {
		margin: 0 auto;
		max-width: $max-width;
		width: 100%;
		*zoom: 1;
		&:before,
		&:after {
			content:"";
			display:table;
		}
		&:after {
			clear:both;
		}
	}

 	// nested rows should appear within a column
 	// they have negative margins to balance out the column's padding
	@if $use == nested {
		margin-right: -$gutter;
		margin-left: -$gutter;
		max-width: none;
		width: auto;
		*zoom: 1;
		&:before,
		&:after {
			content:"";
			display:table;
		}
		&:after {
			clear:both;
		}
	}
}


// ----- Columns
@mixin columns($number,$columns:$columns) {
	float: left;
	padding-right: $gutter;
	padding-left: $gutter;
	width: $width / ($columns / $number);
}

@mixin resized-columns($number,$columns:$columns) {
	// class designed for media queries; it repeats less css
	position: static; // used to cancel out a .left- or .right- class
	width: $width / ($columns / $number);
}


// ----- Shift Left/Right
@mixin shift-left($offset:1) {
	position: relative;
	right: $width / ($columns / $offset);
}

@mixin shift-right($offset:1) {
	position: relative;
	left: $width / ($columns / $offset);
}


// ----- Block Grids
@mixin block-grid($up:2){
	$block-plus: 1;
	$block-selector: #{$up}n+#{$block-plus};
	display: block;
	margin: 0 #{-$gutter} 15px #{-$gutter};
	overflow: auto;
	> li {
		display: block;
		float: left;
		height: auto;
		padding-right: $gutter;
		padding-left: $gutter;
		width: 100% / $up;
		&:nth-of-type(#{$block-selector}) {
			clear: both;
		}
	}
}

@mixin block-reset($up:2){
	$reset-plus: 1;
	$reset-selector: #{$up}n+#{$reset-plus};
	li:nth-of-type( #{$reset-selector} ) {
		clear: none;
	}
}


 // ----- CSS Ready Mixins and Classes
// -----------------------------------

// This section includes lighter versions of the mixins found above
// These are used in conjuction with new classes to reduce overall css

// ----- Rows
.row {
	@include row;
	.row {
		@include row(nested);
	}
}


// ----- Columns
@mixin columns-class($number,$columns:$columns) {
	width: $width / ($columns / $number);
}

[class*="columns-"] {
	float: left;
	padding-right: $gutter;
	padding-left: $gutter;
	&.column-center {
		float: none;
		margin: 0 auto;
	}
}

@for $i from 1 through $columns {
	.columns-#{$i} {
		@include columns-class($i);
	}
}


// ----- Shift Left/Right
@mixin shift-left-class($offset:1) {
	right: $width / ($columns / $offset);
}

@mixin shift-right-class($offset:1) {
	left: $width / ($columns / $offset);
}

[class*="right-"],
[class*="left-"] {
	position: relative
}

@for $i from 1 through $columns {
	.left-#{$i} {
		@include shift-left($i);
	}
}

@for $i from 1 through $columns {
	.right-#{$i} {
		@include shift-right($i);
	}
}


// ----- Block Grids
 @mixin block-grid-class($up:2){
	$block-plus: 1;
	$block-selector: #{$up}n+#{$block-plus};
	> li {
		width: 100% / $up;
		&:nth-of-type(#{$block-selector}) {
			clear: both;
		}
	}
}

[class*="block-grid-"] {
	display: block;
	margin: 0 #{-$gutter} 15px #{-$gutter};
	overflow: auto;
	padding: 0;
	> li {
		display: block;
		float: left;
		height: auto;
		padding-right: $gutter;
		padding-left: $gutter;
	}
}

@for $i from 1 through $block-grids {
	.block-grid-#{$i} {
		@include block-grid-class($i);
	}
}
